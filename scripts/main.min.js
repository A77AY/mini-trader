"use strict";

function Graph(element, indicators, oIndicators, type, cen, dataType, val) {
  var indicatorsArr = [];

  if (indicators.isMacd) indicatorsArr.push("macd");
  if (indicators.isRsi) indicatorsArr.push("rsi");
  if (indicators.isStochastic) indicatorsArr.push("stochastic");

  var dim = {
    width: element.offsetWidth, height: 700,
    margin: { top: 20, right: 50, bottom: 30, left: 50 },
    ohlc: { heightPart: 0.5 },
    indicator: {
      height: 0,
      padding: 5,
      count: Object.keys(indicators).length
    }
  };

  var height = dim.height - dim.margin.top - dim.margin.bottom;
  dim.ohlc.height = dim.indicator.count > 0 ? Math.round(height * dim.ohlc.heightPart) : height;

  if (dim.indicator.count > 0) dim.indicator.height = (height - dim.ohlc.height - dim.indicator.padding * (dim.indicator.count + 1)) / dim.indicator.count;

  dim.plot = {
    width: dim.width - dim.margin.left - dim.margin.right,
    height: dim.height - dim.margin.top - dim.margin.bottom
  };
  dim.indicator.top = dim.ohlc.height + dim.indicator.padding;
  dim.indicator.bottom = dim.indicator.top + dim.indicator.height + dim.indicator.padding;

  var indicatorTop = d3.scale.linear().range([dim.indicator.top, dim.indicator.bottom]);

  var parseDate = d3.time.format("%Y-%m-%d").parse;

  var zoom = d3.behavior.zoom().on("zoom", draw);

  var zoomPercent = d3.behavior.zoom();

  var x = techan.scale.financetime().range([0, dim.plot.width]);

  var y = d3.scale.linear().range([dim.ohlc.height, 0]);

  var yPercent = y.copy(); // Same as y at this stage, will get a different domain later

  var yVolume = d3.scale.linear().range([y(0), y(0.2)]);

  var candlestick = techan.plot[type]().xScale(x).yScale(y);

  var tradearrow = techan.plot.tradearrow().xScale(x).yScale(y).y(function (d) {
    // Display the buy and sell arrows a bit above and below the price, so the price is still visible
    if (d.type === 'buy') return y(d.low) + 5;
    if (d.type === 'sell') return y(d.high) - 5;else return y(d.price);
  });

  var sma0 = techan.plot.sma().xScale(x).yScale(y);

  var sma1 = techan.plot.sma().xScale(x).yScale(y);

  var ema2 = techan.plot.ema().xScale(x).yScale(y);

  var ichimoku = techan.plot.ichimoku().xScale(x).yScale(y);

  var volume = techan.plot.volume().accessor(candlestick.accessor()) // Set the accessor to a ohlc accessor so we get highlighted bars
  .xScale(x).yScale(yVolume);

  var xAxis = d3.svg.axis().scale(x).orient("bottom");

  var timeAnnotation = techan.plot.axisannotation().axis(xAxis).format(d3.time.format('%Y-%m-%d')).width(65).translate([0, dim.plot.height]);

  var yAxis = d3.svg.axis().scale(y).orient("right");

  var ohlcAnnotation = techan.plot.axisannotation().axis(yAxis).format(d3.format(',.2fs')).translate([x(1), 0]);

  var closeAnnotation = techan.plot.axisannotation().axis(yAxis).accessor(candlestick.accessor()).format(d3.format(',.2fs')).translate([x(1), 0]);

  var percentAxis = d3.svg.axis().scale(yPercent).orient("left").tickFormat(d3.format('+.1%'));

  var percentAnnotation = techan.plot.axisannotation().axis(percentAxis);

  var volumeAxis = d3.svg.axis().scale(yVolume).orient("right").ticks(3).tickFormat(d3.format(",.3s"));

  var volumeAnnotation = techan.plot.axisannotation().axis(volumeAxis).width(35);

  var macdScale = d3.scale.linear().range([indicatorTop(0) + dim.indicator.height, indicatorTop(0)]);

  var rsiScale = macdScale.copy().range([indicatorTop(+!!indicators.isMacd) + dim.indicator.height, indicatorTop(+!!indicators.isMacd)]);

  var stochasticScale = macdScale.copy().range([indicatorTop(+!!indicators.isMacd + !!indicators.isRsi) + dim.indicator.height, indicatorTop(+!!indicators.isMacd + !!indicators.isRsi)]);

  var macd = techan.plot.macd().xScale(x).yScale(macdScale);

  var macdAxis = d3.svg.axis().scale(macdScale).ticks(3).orient("right");

  var macdAnnotation = techan.plot.axisannotation().axis(macdAxis).format(d3.format(',.2fs')).translate([x(1), 0]);

  var macdAxisLeft = d3.svg.axis().scale(macdScale).ticks(3).orient("left");

  var macdAnnotationLeft = techan.plot.axisannotation().axis(macdAxisLeft).format(d3.format(',.2fs'));

  var rsi = techan.plot.rsi().xScale(x).yScale(rsiScale);

  var rsiAxis = d3.svg.axis().scale(rsiScale).ticks(3).orient("right");

  var rsiAnnotation = techan.plot.axisannotation().axis(rsiAxis).format(d3.format(',.2fs')).translate([x(1), 0]);

  var rsiAxisLeft = d3.svg.axis().scale(rsiScale).ticks(3).orient("left");

  var rsiAnnotationLeft = techan.plot.axisannotation().axis(rsiAxisLeft).format(d3.format(',.2fs'));

  var stochastic = techan.plot.stochastic().xScale(x).yScale(stochasticScale);

  var stochasticAxis = d3.svg.axis().scale(stochasticScale).ticks(3).orient("right");

  var stochasticAnnotation = techan.plot.axisannotation().axis(stochasticAxis).format(d3.format(',.2fs')).translate([x(1), 0]);

  var stochasticAxisLeft = d3.svg.axis().scale(stochasticScale).ticks(3).orient("left");

  var stochasticAnnotationLeft = techan.plot.axisannotation().axis(stochasticAxisLeft).format(d3.format(',.2fs'));

  var ohlcCrosshair = techan.plot.crosshair().xScale(timeAnnotation.axis().scale()).yScale(ohlcAnnotation.axis().scale()).xAnnotation(timeAnnotation).yAnnotation([ohlcAnnotation, percentAnnotation, volumeAnnotation]).verticalWireRange([0, dim.plot.height]);

  var macdCrosshair = techan.plot.crosshair().xScale(timeAnnotation.axis().scale()).yScale(macdAnnotation.axis().scale()).xAnnotation(timeAnnotation).verticalWireRange([0, dim.plot.height]);

  var rsiCrosshair = techan.plot.crosshair().xScale(timeAnnotation.axis().scale()).yScale(rsiAnnotation.axis().scale()).xAnnotation(timeAnnotation).yAnnotation([rsiAnnotation, rsiAnnotationLeft]).verticalWireRange([0, dim.plot.height]);

  var stochasticCrosshair = techan.plot.crosshair().xScale(timeAnnotation.axis().scale()).yScale(stochasticAnnotation.axis().scale()).xAnnotation(timeAnnotation).yAnnotation([stochasticAnnotation, stochasticAnnotationLeft]).verticalWireRange([0, dim.plot.height]);

  element.innerHTML = '';
  var svg = d3.select(element).append("svg").attr("width", dim.width).attr("height", dim.height);

  var defs = svg.append("defs");

  defs.append("clipPath").attr("id", "ohlcClip").append("rect").attr("x", 0).attr("y", 0).attr("width", dim.plot.width).attr("height", dim.ohlc.height);

  defs.selectAll("indicatorClip").data([0, 1]).enter().append("clipPath").attr("id", function (d, i) {
    return "indicatorClip-" + i;
  }).append("rect").attr("x", 0).attr("y", function (d, i) {
    return indicatorTop(i);
  }).attr("width", dim.plot.width).attr("height", dim.indicator.height);

  svg = svg.append("g").attr("transform", "translate(" + dim.margin.left + "," + dim.margin.top + ")");

  svg.append("g").attr("class", "x axis").attr("transform", "translate(0," + dim.plot.height + ")");

  var ohlcSelection = svg.append("g").attr("class", "ohlc").attr("transform", "translate(0,0)");

  ohlcSelection.append("g").attr("class", "axis").attr("transform", "translate(" + x(1) + ",0)").append("text").attr("transform", "rotate(-90)").attr("y", -12).attr("dy", ".71em").style("text-anchor", "end").text("Цена (" + val + ")");

  ohlcSelection.append("g").attr("class", "close annotation up");

  ohlcSelection.append("g").attr("class", "volume").attr("clip-path", "url(#ohlcClip)");

  ohlcSelection.append("g").attr("class", "candlestick").attr("clip-path", "url(#ohlcClip)");

  ohlcSelection.append("g").attr("class", "indicator sma ma-0").attr("clip-path", "url(#ohlcClip)");

  ohlcSelection.append("g").attr("class", "indicator sma ma-1").attr("clip-path", "url(#ohlcClip)");

  ohlcSelection.append("g").attr("class", "indicator ema ma-2").attr("clip-path", "url(#ohlcClip)");

  ohlcSelection.append("g").attr("class", "indicator ichimoku").attr("clip-path", "url(#ohlcClip)");

  ohlcSelection.append("g").attr("class", "percent axis");

  ohlcSelection.append("g").attr("class", "volume axis");

  var indicatorSelection = svg.selectAll("svg > g.indicator").data(indicatorsArr).enter().append("g").attr("class", function (d) {
    return d + " indicator";
  });

  indicatorSelection.append("g").attr("class", "axis right").attr("transform", "translate(" + x(1) + ",0)");

  indicatorSelection.append("g").attr("class", "axis left").attr("transform", "translate(" + x(0) + ",0)");

  indicatorSelection.append("g").attr("class", "indicator-plot").attr("clip-path", function (d, i) {
    return "url(#indicatorClip-" + i + ")";
  });

  // Add trendlines and other interactions last to be above zoom pane
  svg.append('g').attr("class", "crosshair ohlc");

  svg.append('g').attr("class", "crosshair macd");

  svg.append('g').attr("class", "crosshair rsi");

  svg.append('g').attr("class", "crosshair stochastic");

  svg.append("g").attr("class", "tradearrow").attr("clip-path", "url(#ohlcClip)");

  d3.select("button").on("click", reset);

  d3.csv("data/" + cen + "-" + dataType + ".csv", function (error, data) {
    var accessor = candlestick.accessor(),
        indicatorPreRoll = 33; // Don't show where indicators don't have data

    data = data.map(function (d) {
      return {
        date: parseDate(d.Date),
        open: +d.Open,
        high: +d.High,
        low: +d.Low,
        close: +d.Close,
        volume: +d.Volume
      };
    }).sort(function (a, b) {
      return d3.ascending(accessor.d(a), accessor.d(b));
    });

    x.domain(techan.scale.plot.time(data).domain());
    y.domain(techan.scale.plot.ohlc(data.slice(indicatorPreRoll)).domain());

    yPercent.domain(techan.scale.plot.percent(y, accessor(data[indicatorPreRoll])).domain());
    yVolume.domain(techan.scale.plot.volume(data).domain());

    var macdData = techan.indicator.macd()(data);
    macdScale.domain(techan.scale.plot.macd(macdData).domain());
    var rsiData = techan.indicator.rsi()(data);
    rsiScale.domain(techan.scale.plot.rsi(rsiData).domain());
    var stochasticData = techan.indicator.stochastic()(data);
    stochasticScale.domain(techan.scale.plot.stochastic(stochasticData).domain());

    var ichimokuData = techan.indicator.ichimoku()(data);

    // TRADES

    var trades = [];

    if (indicators.isMacd) {
      var pos = data.map(function (e) {
        return e.date;
      }).indexOf(macdData[0].date);
      for (var i = 1, last = macdData[0]; i < macdData.length; ++i) {
        var curr = macdData[i];
        if (curr.macd < 0 && last.signal >= last.macd && curr.signal < curr.macd) {
          trades.push({ date: curr.date, type: "buy", price: data[i + pos].low, low: data[i + pos].low, high: data[i + pos].high });
        } else if (curr.macd > 0 && last.signal <= last.macd && curr.signal > curr.macd) {
          trades.push({ date: curr.date, type: "sell", price: data[i + pos].low, low: data[i + pos].low, high: data[i + pos].high });
        }
        last = curr;
      }
    }

    if (indicators.isRsi) {
      var _pos = data.map(function (e) {
        return e.date;
      }).indexOf(rsiData[0].date);
      for (var _i = 1, _last = rsiData[0]; _i < rsiData.length; ++_i) {
        var _curr = rsiData[_i];
        if (_curr.rsi < 30 && _last.rsi >= 30) {
          trades.push({ date: _curr.date, type: "buy", price: data[_i + _pos].low, low: data[_i + _pos].low, high: data[_i + _pos].high });
        } else if (_curr.rsi > 70 && _last.rsi <= 70) {
          trades.push({ date: _curr.date, type: "sell", price: data[_i + _pos].low, low: data[_i + _pos].low, high: data[_i + _pos].high });
        }
        _last = _curr;
      }
    }

    if (indicators.isStochastic) {

      for (var _i2 = 1, _last2 = stochasticData[0]; _i2 < stochasticData.length; ++_i2) {
        var _curr2 = stochasticData[_i2];
        if (_curr2.stochasticD >= 20 && _last2.stochasticD < 20 || _curr2.stochasticK >= 20 && _last2.stochasticK < 20 || _curr2.stochasticK > _curr2.stochasticD && _last2.stochasticK <= _last2.stochasticD) {
          var _pos2 = data.map(function (e) {
            return e.date;
          }).indexOf(_curr2.date);
          trades.push({ date: _curr2.date, type: "buy", price: data[_pos2].low, low: data[_pos2].low, high: data[_pos2].high });
        } else if (_curr2.stochasticD <= 80 && _last2.stochasticD > 80 || _curr2.stochasticK <= 80 && _last2.stochasticK > 80 || _curr2.stochasticK < _curr2.stochasticD && _last2.stochasticK >= _last2.stochasticD) {
          var _pos3 = data.map(function (e) {
            return e.date;
          }).indexOf(_curr2.date);
          trades.push({ date: _curr2.date, type: "sell", price: data[_pos3].low, low: data[_pos3].low, high: data[_pos3].high });
        }
        _last2 = _curr2;
      }
    }

    if (oIndicators.isIchimoku.status) {
      for (var _i3 = 0, _last3 = ichimokuData[0]; _i3 < ichimokuData.length; ++_i3) {
        var _curr3 = ichimokuData[_i3];
        if (_curr3.tenkanSen && _curr3.kijunSen && _last3.tenkanSen && _last3.kijunSen && _curr3.tenkanSen > _curr3.kijunSen && _last3.tenkanSen <= _last3.kijunSen || // крест
        _curr3.senkouSpanA && _curr3.senkouSpanB && _last3.senkouSpanA && _last3.senkouSpanB && _curr3.senkouSpanA > _curr3.senkouSpanB && _last3.senkouSpanA <= _last3.senkouSpanB || _curr3.chikouSpan && data.close && _last3.chikouSpan && _last3.close && _curr3.chikouSpan > data.close && _last3.chikouSpan <= _last3.close) {
          trades.push({ date: _curr3.date, type: "buy", price: data[_i3].low, low: data[_i3].low, high: data[_i3].high });
        } else if (_curr3.tenkanSen && _curr3.kijunSen && _last3.tenkanSen && _last3.kijunSen && _curr3.tenkanSen < _curr3.kijunSen && _last3.tenkanSen >= _last3.kijunSen || _curr3.senkouSpanA && _curr3.senkouSpanB && _last3.senkouSpanA && _last3.senkouSpanB && _curr3.senkouSpanA < _curr3.senkouSpanB && _last3.senkouSpanA >= _last3.senkouSpanB || _curr3.chikouSpan && data.close && _last3.chikouSpan && _last3.close && _curr3.chikouSpan < data.close && _last3.chikouSpan >= _last3.close) {
          trades.push({ date: _curr3.date, type: "sell", price: data[_i3].low, low: data[_i3].low, high: data[_i3].high });
        }
        _last3 = _curr3;
      }
    }

    svg.select("g.candlestick").datum(data).call(candlestick);
    svg.select("g.close.annotation").datum([data[data.length - 1]]).call(closeAnnotation);
    svg.select("g.volume").datum(data).call(volume);
    if (oIndicators.isSma.status) svg.select("g.sma.ma-0").datum(techan.indicator.sma().period(10)(data)).call(sma0);
    if (oIndicators.isEma.status) svg.select("g.sma.ma-1").datum(techan.indicator.sma().period(20)(data)).call(sma1);
    if (oIndicators.isEma.status) svg.select("g.ema.ma-2").datum(techan.indicator.ema().period(50)(data)).call(ema2);
    if (oIndicators.isIchimoku.status) svg.select("g.ichimoku").datum(ichimokuData).call(ichimoku);

    svg.select("g.macd .indicator-plot").datum(macdData).call(macd);
    svg.select("g.rsi .indicator-plot").datum(rsiData).call(rsi);
    svg.select("g.stochastic .indicator-plot").datum(stochasticData).call(stochastic);

    svg.select("g.crosshair.ohlc").call(ohlcCrosshair).call(zoom);
    svg.select("g.crosshair.macd").call(macdCrosshair).call(zoom);
    svg.select("g.crosshair.rsi").call(rsiCrosshair).call(zoom);
    svg.select("g.crosshair.stochastic").call(stochasticCrosshair).call(zoom);

    svg.select("g.tradearrow").datum(trades).call(tradearrow);

    var zoomable = x.zoomable();
    zoomable.domain([indicatorPreRoll, data.length]); // Zoom in a little to hide indicator preroll

    draw();

    // Associate the zoom with the scale after a domain has been applied
    zoom.x(zoomable).y(y);
    zoomPercent.y(yPercent);
  });

  function reset() {
    zoom.scale(1);
    zoom.translate([0, 0]);
    draw();
  }

  function draw() {
    zoomPercent.translate(zoom.translate());
    zoomPercent.scale(zoom.scale());

    svg.select("g.x.axis").call(xAxis);
    svg.select("g.ohlc .axis").call(yAxis);
    svg.select("g.volume.axis").call(volumeAxis);
    svg.select("g.percent.axis").call(percentAxis);
    svg.select("g.macd .axis.right").call(macdAxis);
    svg.select("g.stochastic .axis.right").call(stochasticAxis);
    svg.select("g.rsi .axis.right").call(rsiAxis);
    svg.select("g.macd .axis.left").call(macdAxisLeft);
    svg.select("g.stochastic .axis.left").call(stochasticAxisLeft);
    svg.select("g.rsi .axis.left").call(rsiAxisLeft);

    // We know the data does not change, a simple refresh that does not perform data joins will suffice.
    svg.select("g.candlestick").call(candlestick.refresh);
    svg.select("g.close.annotation").call(closeAnnotation.refresh);
    svg.select("g.volume").call(volume.refresh);
    svg.select("g .sma.ma-0").call(sma0.refresh);
    svg.select("g .sma.ma-1").call(sma1.refresh);
    svg.select("g .ema.ma-2").call(ema2.refresh);
    svg.select("g .ichimoku").call(ichimoku.refresh);

    svg.select("g.macd .indicator-plot").call(macd.refresh);
    svg.select("g.stochastic .indicator-plot").call(stochastic.refresh);
    svg.select("g.rsi .indicator-plot").call(rsi.refresh);
    svg.select("g.crosshair.ohlc").call(ohlcCrosshair.refresh);
    svg.select("g.crosshair.macd").call(macdCrosshair.refresh);
    svg.select("g.crosshair.stochastic").call(stochasticCrosshair.refresh);
    svg.select("g.crosshair.rsi").call(rsiCrosshair.refresh);

    svg.select("g.tradearrow").call(tradearrow.refresh);
  }
}

var element = document.getElementById('graph');
var indicators = {
  isMacd: {
    element: document.getElementById('isMacd')
  },
  isRsi: {
    element: document.getElementById('isRsi')
  },
  isStochastic: {
    element: document.getElementById('isStochastic')
  }
};
var oIndicators = {
  isSma: {
    element: document.getElementById('isSma')
  },
  isEma: {
    element: document.getElementById('isEma')
  },
  isIchimoku: {
    element: document.getElementById('isIchimoku')
  }
};

var type = 'candlestick';

document.getElementById('cand').addEventListener('change', function (e) {
  type = 'candlestick';
  update();
});
document.getElementById('ohlc').addEventListener('change', function (e) {
  type = 'ohlc';
  update();
});
document.getElementById('close').addEventListener('change', function (e) {
  type = 'close';
  update();
});

///
var data = 'd';
var val = '₽';
document.getElementById('day').addEventListener('change', function (e) {
  data = 'd';
  update();
});
document.getElementById('week').addEventListener('change', function (e) {
  data = 'w';
  update();
});
document.getElementById('month').addEventListener('change', function (e) {
  data = 'm';
  update();
});

var cen = 'BANE';
document.getElementById('BANE').addEventListener('change', function (e) {
  cen = 'BANE';
  val = '₽';
  update();
});
document.getElementById('YNDX').addEventListener('change', function (e) {
  cen = 'YNDX';
  val = '$';
  update();
});
document.getElementById('KMAZ').addEventListener('change', function (e) {
  cen = 'KMAZ';
  val = '₽';
  update();
});

var currentIndicators = {};

var _loop = function _loop(key) {
  oIndicators[key].element.addEventListener('change', function () {
    oIndicators[key].status = oIndicators[key].element.checked;
    update();
  });
};

for (var key in oIndicators) {
  _loop(key);
}

var _loop2 = function _loop2(_key) {
  indicators[_key].element.addEventListener('change', function () {
    indicators[_key].status = indicators[_key].element.checked;
    if (indicators[_key].status) currentIndicators[_key] = indicators[_key];else delete currentIndicators[_key];
    update();
  });
};

for (var _key in indicators) {
  _loop2(_key);
}

function update() {
  Graph(element, currentIndicators, oIndicators, type, cen, data, val);
}

$(window).resize(function () {
  update();
});

var graph = Graph(element, currentIndicators, oIndicators, type, cen, data, val);
